generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  fullName          String
  email             String             @unique
  role              Role
  password          String
  profile_picture   String             @default("")
  refresh_token     String             @default("")
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt

  createdMessages   Message[]          @relation("sentMessages")
  conversationUsers ConversationUser[]
  groups            GroupMember[]
  assignedTasks     Task[]             @relation("assignedTasks")
  assignedProjects  Project[]          @relation("assignedProjects")
  minutes           Minute[]
  Group             Group[]
  Session           Session[]          @relation("sessionParticipants")
  Invite            Invite[]
  groupRoles        GroupRole[]
}

enum Role {
  STUDENT
  SUPERVISOR
}

model Group {
  id            String         @id @default(cuid())
  groupName     String
  description   String
  purpose       String          
  module        String?
  tags          String[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt()

  members       GroupMember[]
  groupRoles    GroupRole[]
  supervisor    User?           @relation(fields: [supervisorId], references: [id])
  supervisorId  String?

  projects      Project[]
  tasks         Task[]
  sessions      Session[]
  chat         Conversation?
  // chat          Conversation?   @relation(fields: [groupId], references: [id])
  groupId       String?

  invites       Invite[]
  notes         Note[]
}

model GroupRole {
  id          String   @id @default(cuid())
  title       String   
  description String   
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
  created_at  DateTime @default(now())
}

model GroupMember {
  id       String @id @default(cuid())
  group    Group  @relation(fields: [groupId], references: [id])
  groupId  String
  user     User   @relation(fields: [userId], references: [id])
  userId   String
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  status      String
  module      String?
  created_at  DateTime @default(now())
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
  assignees   User[]   @relation("assignedProjects")
  minutes     Minute[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  assignee    User     @relation("assignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
}

model Session {
  id           String   @id @default(cuid())
  goal         String
  date         DateTime
  time         String
  duration     Int      // in minutes
  group        Group    @relation(fields: [groupId], references: [id])
  groupId      String
  participants User[]   @relation("sessionParticipants")
  minutes      Minute[]
}

model Minute {
  id         String    @id @default(cuid())
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  project    Project?  @relation(fields: [projectId], references: [id])
  projectId  String?
  session    Session?  @relation(fields: [sessionId], references: [id])
  sessionId  String?
  created_at DateTime  @default(now())
}

model Note {
  id         String    @id @default(cuid())
  title      String
  content    String
  group      Group     @relation(fields: [groupId], references: [id])
  groupId    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt()
}

model Invite {
  id           String       @id @default(cuid())
  group        Group        @relation(fields: [groupId], references: [id])
  groupId      String
  supervisor   User         @relation(fields: [supervisorId], references: [id])
  supervisorId String
  status       InviteStatus @default(PENDING)
  created_at   DateTime     @default(now())
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Conversation {
  id              String             @id @default(cuid())
  title           String?
  created_at      DateTime           @default(now())
  dateLastMessage DateTime?
  group           Group?             @relation(fields: [groupId], references: [id])
  groupId         String?            @unique

  messages        Message[]
  participants    ConversationUser[]
}

model ConversationUser {
  id             String         @id @default(cuid())
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation   @relation(fields: [conversationId], references: [id])
  conversationId String
  isRead         Boolean        @default(true)

  @@unique([conversationId, userId])
}

model Message {
  id             String             @id @default(cuid())
  message        String
  author         User               @relation("sentMessages", fields: [authorId], references: [id])
  authorId       String
  created_at     DateTime           @default(now())
  conversation   Conversation?      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?
  isEdited       Boolean            @default(false)
}
